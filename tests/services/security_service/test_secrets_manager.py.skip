#!/usr/bin/env python3
"""
Tests for Secrets Manager Module
Tests secure API key management with multiple backends.
"""

import pytest
import os
from unittest.mock import patch, MagicMock
from services.secrets_manager import (
    SecretsBackend, EnvironmentBackend, get_secret
)


class TestSecretsManager:
    """Test suite for secrets management functionality."""

    def test_environment_backend_get_secret(self):
        """Test environment variable backend."""
        with patch.dict(os.environ, {'TEST_SECRET': 'test_value'}):
            backend = EnvironmentBackend()
            assert backend.get_secret('TEST_SECRET') == 'test_value'
            assert backend.get_secret('NON_EXISTENT') is None

    def test_environment_backend_set_secret(self):
        """Test setting environment variable."""
        backend = EnvironmentBackend()
        backend.set_secret('TEST_SET_SECRET', 'test_value')
        assert os.environ.get('TEST_SET_SECRET') == 'test_value'

    def test_environment_backend_list_secrets(self):
        """Test listing environment variables."""
        with patch.dict(os.environ, {'TRADPAL_API_KEY': 'test_key', 'OTHER_VAR': 'other'}):
            backend = EnvironmentBackend()
            secrets = backend.list_secrets()
            assert 'TRADPAL_API_KEY' in secrets
            assert 'OTHER_VAR' not in secrets  # Should be filtered

    def test_get_secret_convenience_function(self):
        """Test the convenience get_secret function."""
        with patch.dict(os.environ, {'TEST_SECRET': 'test_value'}):
            # Reset global state
            import services.secrets_manager
            src.secrets_manager.secrets_manager = None
            src.secrets_manager._secrets_backend = None

            assert get_secret('TEST_SECRET') == 'test_value'
            assert get_secret('NON_EXISTENT') is None

    def test_backend_abstract_methods(self):
        """Test that SecretsBackend raises NotImplementedError for abstract methods."""
        # We can't instantiate abstract class directly, so we test with a concrete implementation
        backend = EnvironmentBackend()

        # These should work (implemented methods)
        backend.get_secret('test')
        backend.set_secret('test', 'value')
        backend.list_secrets()

        # Test that abstract methods would raise error if not implemented
        # (This is tested implicitly by the concrete implementations)