"""
Tests for Redis cache functionality.
"""

import pytest
import pandas as pd
from unittest.mock import Mock, patch, MagicMock
import pickle

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from services.cache import RedisCache, HybridCache


class TestRedisCache:
    """Test Redis cache functionality."""
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_initialization_success(self, mock_redis_class, mock_pool):
        """Test successful Redis cache initialization."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache(host='localhost', port=6379, ttl_seconds=60)
        
        assert cache.redis_client is not None
        assert cache.ttl_seconds == 60
        mock_redis_instance.ping.assert_called_once()
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_initialization_failure(self, mock_redis_class, mock_pool):
        """Test Redis cache initialization failure."""
        mock_redis_class.side_effect = Exception("Connection failed")
        
        cache = RedisCache()
        
        assert cache.redis_client is None
    
    @patch('src.cache.REDIS_AVAILABLE', False)
    def test_initialization_redis_not_available(self):
        """Test initialization when Redis is not available."""
        cache = RedisCache()
        
        assert cache.redis_client is None
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_set_and_get_string(self, mock_redis_class, mock_pool):
        """Test setting and getting string values."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache(ttl_seconds=60)
        
        # Test set
        test_value = "test_string"
        result = cache.set("test_key", test_value)
        
        assert result
        mock_redis_instance.setex.assert_called_once()
        
        # Test get
        mock_redis_instance.get.return_value = pickle.dumps(test_value)
        retrieved = cache.get("test_key")
        
        assert retrieved == test_value
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_set_and_get_dataframe(self, mock_redis_class, mock_pool):
        """Test setting and getting DataFrame values."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache(ttl_seconds=60)
        
        # Create test DataFrame
        df = pd.DataFrame({
            'col1': [1, 2, 3],
            'col2': ['a', 'b', 'c']
        })
        
        # Test set
        result = cache.set("test_df", df)
        assert result
        
        # Test get
        mock_redis_instance.get.return_value = pickle.dumps(df)
        retrieved = cache.get("test_df")
        
        assert isinstance(retrieved, pd.DataFrame)
        assert retrieved.equals(df)
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_get_nonexistent_key(self, mock_redis_class, mock_pool):
        """Test getting a non-existent key."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.get.return_value = None
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache()
        
        result = cache.get("nonexistent_key")
        
        assert result is None
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_delete(self, mock_redis_class, mock_pool):
        """Test deleting a key."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache()
        
        result = cache.delete("test_key")
        
        assert result
        mock_redis_instance.delete.assert_called_once_with("test_key")
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_clear(self, mock_redis_class, mock_pool):
        """Test clearing cache."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.keys.return_value = [b'key1', b'key2']
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache()
        
        result = cache.clear(pattern="test:*")
        
        assert result
        mock_redis_instance.keys.assert_called_once_with("test:*")
        mock_redis_instance.delete.assert_called_once()
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_exists(self, mock_redis_class, mock_pool):
        """Test checking if key exists."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.exists.return_value = 1
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache()
        
        result = cache.exists("test_key")
        
        assert result
        mock_redis_instance.exists.assert_called_once_with("test_key")
    
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_get_ttl(self, mock_redis_class, mock_pool):
        """Test getting TTL for a key."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.ttl.return_value = 45
        mock_redis_class.return_value = mock_redis_instance
        
        cache = RedisCache()
        
        ttl = cache.get_ttl("test_key")
        
        assert ttl == 45
        mock_redis_instance.ttl.assert_called_once_with("test_key")
    
    def test_operations_without_client(self):
        """Test that operations fail gracefully without Redis client."""
        cache = RedisCache()
        cache.redis_client = None
        
        assert cache.get("key") is None
        assert not cache.set("key", "value")
        assert not cache.delete("key")
        assert not cache.clear()
        assert not cache.exists("key")
        assert cache.get_ttl("key") is None


class TestHybridCache:
    """Test hybrid cache functionality."""
    
    @patch('src.cache.REDIS_ENABLED', False)
    def test_initialization_without_redis(self):
        """Test initialization when Redis is disabled."""
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        assert not cache.use_redis
        assert cache.file_cache is not None
    
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_initialization_with_redis(self, mock_redis_class, mock_pool):
        """Test initialization when Redis is enabled."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        assert cache.use_redis
        assert cache.redis_cache is not None
        assert cache.file_cache is not None
    
    @patch('src.cache.REDIS_ENABLED', False)
    def test_get_from_file_cache(self):
        """Test getting value from file cache when Redis is disabled."""
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        # Set value
        cache.set("test_key", "test_value")
        
        # Get value
        result = cache.get("test_key")
        
        # Should retrieve from file cache
        assert result == "test_value"
    
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_get_from_redis_cache(self, mock_redis_class, mock_pool):
        """Test getting value from Redis cache when available."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.get.return_value = pickle.dumps("redis_value")
        mock_redis_class.return_value = mock_redis_instance
        
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        result = cache.get("test_key")
        
        assert result == "redis_value"
    
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_set_to_both_caches(self, mock_redis_class, mock_pool):
        """Test setting value to both Redis and file cache."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_class.return_value = mock_redis_instance
        
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        cache.set("test_key", "test_value")
        
        # Should call Redis setex
        mock_redis_instance.setex.assert_called_once()
    
    @patch('src.cache.REDIS_ENABLED', True)
    @patch('src.cache.REDIS_AVAILABLE', True)
    @patch('src.cache.ConnectionPool')
    @patch('redis.Redis')
    def test_clear_both_caches(self, mock_redis_class, mock_pool):
        """Test clearing both Redis and file cache."""
        mock_redis_instance = MagicMock()
        mock_redis_instance.ping.return_value = True
        mock_redis_instance.keys.return_value = []
        mock_redis_class.return_value = mock_redis_instance
        
        cache = HybridCache(cache_dir="test_cache", ttl_seconds=60)
        
        cache.clear()
        
        # Should call Redis clear
        mock_redis_instance.keys.assert_called_once()


if __name__ == "__main__":
    pytest.main([__file__, '-v'])
