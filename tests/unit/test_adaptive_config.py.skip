#!/usr/bin/env python3
"""
Test script for adaptive configuration system.
Tests both conservative and discovery modes.
"""

import sys
import os

# Add project paths for testing
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', '..', 'services'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))  # Add project root for config

from config.settings import (
    CONFIG_MODE, CONSERVATIVE_CONFIG, DISCOVERY_CONFIG,
    get_current_indicator_config, ADAPTIVE_CONFIG_FILE
)
from services.indicators import calculate_indicators
from services.data_fetcher import fetch_historical_data
import pandas as pd

def test_configuration_modes():
    """Test switching between configuration modes."""
    print("üß™ Testing Configuration Modes")
    print("=" * 50)

    # Test conservative mode
    print(f"1. Testing CONSERVATIVE mode:")
    print(f"   CONFIG_MODE: {CONFIG_MODE}")
    config = get_current_indicator_config()
    print(f"   EMA enabled: {config['ema']['enabled']}")
    print(f"   RSI enabled: {config['rsi']['enabled']}")
    print(f"   BB enabled: {config['bb']['enabled']}")
    print(f"   ATR enabled: {config['atr']['enabled']}")
    print()

    # Test discovery mode
    print("2. Testing DISCOVERY mode:")
    # Temporarily change mode
    import config.settings
    original_mode = config.settings.CONFIG_MODE
    config.settings.CONFIG_MODE = 'discovery'

    config_discovery = get_current_indicator_config()
    print(f"   CONFIG_MODE: discovery")
    print(f"   EMA enabled: {config_discovery['ema']['enabled']}")
    print(f"   RSI enabled: {config_discovery['rsi']['enabled']}")
    print(f"   BB enabled: {config_discovery['bb']['enabled']}")
    print(f"   ATR enabled: {config_discovery['atr']['enabled']}")
    print()

    # Restore original mode
    config.settings.CONFIG_MODE = original_mode

def test_indicator_calculation():
    """Test indicator calculation with different configurations."""
    print("üß™ Testing Indicator Calculation")
    print("=" * 50)

    try:
        # Fetch some test data
        print("Fetching test data...")
        data = fetch_historical_data(limit=100)
        if data.empty:
            print("‚ùå No data available for testing")
            return

        print(f"Loaded {len(data)} data points")

        # Test with conservative config
        print("\nTesting with CONSERVATIVE config:")
        data_conservative = data.copy()
        data_conservative = calculate_indicators(data_conservative, CONSERVATIVE_CONFIG)

        indicators_present = []
        if 'EMA9' in data_conservative.columns:
            indicators_present.append('EMA9')
        if 'RSI' in data_conservative.columns:
            indicators_present.append('RSI')
        if 'BB_upper' in data_conservative.columns:
            indicators_present.append('BB')
        if 'ATR' in data_conservative.columns:
            indicators_present.append('ATR')

        print(f"   Indicators calculated: {', '.join(indicators_present)}")

        # Test with discovery config
        print("\nTesting with DISCOVERY config:")
        data_discovery = data.copy()
        data_discovery = calculate_indicators(data_discovery, DISCOVERY_CONFIG)

        indicators_present = []
        if 'EMA9' in data_discovery.columns:
            indicators_present.append('EMA9')
        if 'RSI' in data_discovery.columns:
            indicators_present.append('RSI')
        if 'BB_upper' in data_discovery.columns:
            indicators_present.append('BB')
        if 'ATR' in data_discovery.columns:
            indicators_present.append('ATR')

        print(f"   Indicators calculated: {', '.join(indicators_present)}")

        print("‚úÖ Indicator calculation test passed")

    except Exception as e:
        print(f"‚ùå Indicator calculation test failed: {e}")

def test_adaptive_config_loading():
    """Test loading of adaptive configuration file."""
    print("üß™ Testing Adaptive Config Loading")
    print("=" * 50)

    try:
        # Check if adaptive config file exists
        if os.path.exists(ADAPTIVE_CONFIG_FILE):
            print(f"Adaptive config file exists: {ADAPTIVE_CONFIG_FILE}")
            with open(ADAPTIVE_CONFIG_FILE, 'r') as f:
                import json
                data = json.load(f)
            print(f"   Contains best_configuration: {'best_configuration' in data}")
            if 'fitness_score' in data:
                print(f"   Fitness score: {data['fitness_score']}")
        else:
            print(f"Adaptive config file does not exist: {ADAPTIVE_CONFIG_FILE}")
            print("   This is normal if no optimization has been run yet")

        print("‚úÖ Adaptive config loading test passed")

    except Exception as e:
        print(f"‚ùå Adaptive config loading test failed: {e}")

def main():
    """Run all tests."""
    print("üöÄ TradPal - Adaptive Configuration Test Suite")
    print("=" * 60)

    test_configuration_modes()
    print()
    test_indicator_calculation()
    print()
    test_adaptive_config_loading()

    print("\nüéâ All tests completed!")

if __name__ == "__main__":
    main()