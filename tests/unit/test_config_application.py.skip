#!/usr/bin/env python3
"""
Test script to verify that Backtester properly applies Discovery configurations.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from services.backtester import Backtester
from datetime import datetime, timedelta

def test_config_application():
    """Test that Backtester applies Discovery configuration correctly."""
    print("🧪 Testing Backtester configuration application...")

    # Sample Discovery configuration (from discovery results)
    test_config = {
        "ema": {
            "enabled": True,
            "periods": [49, 187]
        },
        "rsi": {
            "enabled": True,
            "period": 20,
            "oversold": 28,
            "overbought": 74
        },
        "bb": {
            "enabled": True,
            "period": 24,
            "std_dev": 2.32
        },
        "atr": {
            "enabled": False,
            "period": 15
        },
        "adx": {
            "enabled": True,
            "period": 11
        }
    }

    # Create backtester with config
    backtester = Backtester(
        symbol='BTC/USDT',
        timeframe='1h',
        start_date=datetime.now() - timedelta(days=30),
        end_date=datetime.now(),
        config=test_config
    )

    # Fetch data
    data = backtester._fetch_data()
    if isinstance(data, str):
        print(f"❌ Data fetch failed: {data}")
        return False

    if data.empty:
        print("❌ No data available")
        return False

    print(f"✅ Fetched {len(data)} data points")

    # Prepare traditional signals with config
    data_with_signals = backtester._prepare_traditional_signals(data)

    # Check if indicators were calculated with config
    expected_indicators = []

    # EMA periods from config
    if test_config.get('ema', {}).get('enabled'):
        periods = test_config['ema'].get('periods', [])
        expected_indicators.extend([f'EMA{p}' for p in periods])

    # RSI
    if test_config.get('rsi', {}).get('enabled'):
        expected_indicators.append('RSI')

    # Bollinger Bands
    if test_config.get('bb', {}).get('enabled'):
        expected_indicators.extend(['BB_upper', 'BB_middle', 'BB_lower'])

    # ATR
    if test_config.get('atr', {}).get('enabled'):
        expected_indicators.append('ATR')

    # ADX
    if test_config.get('adx', {}).get('enabled'):
        expected_indicators.extend(['ADX', 'DI_plus', 'DI_minus'])

    # Signals
    expected_indicators.extend(['Buy_Signal', 'Sell_Signal', 'Position_Size_Absolute'])

    missing_indicators = []
    for indicator in expected_indicators:
        if indicator not in data_with_signals.columns:
            missing_indicators.append(indicator)

    if missing_indicators:
        print(f"❌ Missing indicators: {missing_indicators}")
        print(f"Available columns: {list(data_with_signals.columns)}")
        return False

    print(f"✅ All expected indicators calculated: {expected_indicators}")

    # Check if signals were generated
    buy_signals = data_with_signals['Buy_Signal'].sum()
    sell_signals = data_with_signals['Sell_Signal'].sum()

    print(f"📊 Generated {buy_signals} buy signals and {sell_signals} sell signals")

    # Run full backtest
    print("🏃 Running full backtest...")
    results = backtester.run_backtest(strategy='traditional')

    if results.get('success'):
        metrics = results.get('metrics', {})
        print("✅ Backtest successful!")
        print(f"   📈 Total P&L: ${metrics.get('total_pnl', 0):.2f}")
        print(f"   🎯 Win Rate: {metrics.get('win_rate', 0)}%")
        print(f"   📊 Total Trades: {metrics.get('total_trades', 0)}")
        return True
    else:
        print(f"❌ Backtest failed: {results.get('error', 'Unknown error')}")
        return False

if __name__ == '__main__':
    success = test_config_application()
    if success:
        print("\n🎉 Configuration application test PASSED!")
    else:
        print("\n💥 Configuration application test FAILED!")
        sys.exit(1)