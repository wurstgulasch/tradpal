version: '3.8'

services:
  notification-service:
    build:
      context: .
      dockerfile: services/notification_service/Dockerfile
    container_name: tradpal-notification-service
    ports:
      - "8001:8001"
    environment:
      - NOTIFICATION_MAX_WORKERS=3
      - NOTIFICATION_QUEUE_SIZE=100
      - NOTIFICATION_DEFAULT_CHANNELS=telegram,email
      - NOTIFICATION_RATE_LIMIT_TELEGRAM=10
      - NOTIFICATION_RATE_LIMIT_DISCORD=10
      - NOTIFICATION_RATE_LIMIT_EMAIL=5
      - NOTIFICATION_RETRY_ATTEMPTS=3
      - NOTIFICATION_RETRY_DELAY=1.0
      - NOTIFICATION_MAX_RETRY_DELAY=60.0
      # Integration credentials (use .env file in production)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - tradpal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and queue persistence (optional)
  redis:
    image: redis:7-alpine
    container_name: tradpal-notification-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradpal-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: tradpal-notification-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tradpal-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: tradpal-notification-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - tradpal-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  tradpal-network:
    driver: bridge
    name: tradpal-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local